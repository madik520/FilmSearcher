{"version":3,"sources":["components/Input/Input.jsx","components/FilmItem/FilmItem.jsx","components/Button/Button.jsx","container/FilmApp.jsx","serviceWorker.js","index.js"],"names":["Input","_ref","onChange","onKeyPress","value","react_default","a","createElement","className","type","placeholder","defaultProps","FilmItem","films","Fragment","map","film","key","id","src","IMG","poster_path","alt","title","vote_average","release_date","average","release","Button","onClick","API_KEY","FilmApp","_useState","useState","_useState2","Object","slicedToArray","text","setText","_useState3","_useState4","items","setItems","_useState5","_useState6","viewFilm","setViewFilm","useEffect","asyncToGenerator","regenerator_default","mark","_callee","response","data","item","wrap","_context","prev","next","fetch","concat","sent","json","results","stop","apply","this","arguments","FetchPopular","fetchData","_ref2","_callee2","search","resp","_context2","_x","components_Input_Input","_ref3","e","target","components_FilmItem_FilmItem","slice","length","components_Button_Button","Boolean","window","location","hostname","match","ReactDOM","render","src_container_FilmApp","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mSAIMA,eAAQ,SAAAC,GAAqC,IAAlCC,EAAkCD,EAAlCC,SAAUC,EAAwBF,EAAxBE,WAAYC,EAAYH,EAAZG,MACnC,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOP,SAAUA,EAAUC,WAAYA,EAAYC,MAAOA,EAAOM,YAAY,sBAWrGV,EAAMW,aAAe,CACjBT,SAAU,aACVC,WAAY,aACZC,MAAO,IAGIJ,QCpBTY,SAAW,SAAAX,GAAe,IAAZY,EAAYZ,EAAZY,MAChB,OACIR,EAAAC,EAAAC,cAAAF,EAAAC,EAAAQ,SAAA,KACCD,EAAME,IAAK,SAAAC,GACR,OAAOX,EAAAC,EAAAC,cAAA,MAAIU,IAAKD,EAAKE,IACrBb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,OAAKY,IAAKC,EAAMJ,EAAKK,YAAaC,IAAI,cACtCjB,EAAAC,EAAAC,cAAA,UAAKS,EAAKO,OACVlB,EAAAC,EAAAC,cAAA,qBAAaS,EAAKQ,aAAlB,IAAgCnB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iBAC7CH,EAAAC,EAAAC,cAAA,0BAAkBS,EAAKS,qBAgBvCb,EAASD,aAAe,CACpBO,GAAI,EACJC,IAAK,GACLI,MAAO,GACPG,QAAS,EACTC,QAAS,GACTd,MAAO,IAIID,QCrCTgB,EAAS,SAAA3B,GAAA,IAAG4B,EAAH5B,EAAG4B,QAASzB,EAAZH,EAAYG,MAAOI,EAAnBP,EAAmBO,UAAnB,OACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAWA,EAAWqB,QAASA,GAAUzB,IASrDwB,EAAOjB,aAAe,CAClBkB,QAAS,aACTrB,UAAW,GACXJ,MAAO,IAGIwB,QCZTE,EAAU,2CAcHV,EAAM,kCAoEJW,EAlEC,WAAM,IAAAC,EACMC,mBAAS,IADfC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACXK,EADWH,EAAA,GACLI,EADKJ,EAAA,GAAAK,EAEQN,mBAAS,IAFjBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEXE,EAFWD,EAAA,GAEJE,EAFIF,EAAA,GAAAG,EAGcV,mBAAS,GAHvBW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGXE,EAHWD,EAAA,GAGDE,EAHCF,EAAA,GAQlBG,oBACI,YACsB,eAAA9C,EAAAkC,OAAAa,EAAA,EAAAb,CAAAc,EAAA3C,EAAA4C,KAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAA,OAAAL,EAAA3C,EAAAiD,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACMC,MAAK,GAAAC,OAxB5B,+CAwB4BA,OAAc9B,GAAd8B,OAnB5B,mBAmB4BA,OAhB9B,YAemB,cACXR,EADWI,EAAAK,KAAAL,EAAAE,KAAA,EAEEN,EAASU,OAFX,cAEXT,EAFWG,EAAAK,KAAAL,EAAAE,KAAA,EAGEL,EAAKU,QAHP,OAGXT,EAHWE,EAAAK,KAIjBnB,EAASY,GAJQ,yBAAAE,EAAAQ,SAAAb,MAAH,yBAAAlD,EAAAgE,MAAAC,KAAAC,YAAA,EAMlBC,IAEJ,IAGJ,IAAMC,EAAS,eAAAC,EAAAnC,OAAAa,EAAA,EAAAb,CAAAc,EAAA3C,EAAA4C,KAAG,SAAAqB,EAAOC,GAAP,IAAAC,EAAApB,EAAAC,EAAA,OAAAL,EAAA3C,EAAAiD,KAAA,SAAAmB,GAAA,cAAAA,EAAAjB,KAAAiB,EAAAhB,MAAA,UACA,KAAXc,EADW,CAAAE,EAAAhB,KAAA,gBAAAgB,EAAAhB,KAAA,EAESC,MAAK,GAAAC,OAjCrB,8CAiCqBA,OAAa9B,GAAb8B,OA/BpB,mBA+BoBA,OAhCtB,WAgCsBA,OAAyCY,IAFvD,cAEJC,EAFIC,EAAAb,KAAAa,EAAAhB,KAAA,EAGSe,EAAKX,OAHd,cAGJT,EAHIqB,EAAAb,KAAAa,EAAAhB,KAAA,EAISL,EAAKU,QAJd,OAIJT,EAJIoB,EAAAb,KAKVnB,EAASY,GALC,yBAAAoB,EAAAV,SAAAO,MAAH,gBAAAI,GAAA,OAAAL,EAAAL,MAAAC,KAAAC,YAAA,GAoBf,OACI9D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAACqE,EAAD,CAAOzE,WAjBT,SAAA0E,GACL,UADkBA,EAAV5D,KAEfoD,EAAUhC,IAeoCnC,SA1CjC,SAAC4E,GAClBxC,EAAQwC,EAAEC,OAAO3E,QAyCyDA,MAAOiC,OAIzEhC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aACDH,EAAAC,EAAAC,cAACyE,EAAD,CAAUnE,MAAO4B,EAAMwC,MAAM,EAAEpC,MAE3CA,EAAWJ,EAAMyC,QACjB7E,EAAAC,EAAAC,cAAC4E,EAAD,CAAQtD,QApBb,WACbiB,EAAYD,EAAW,IAmBsBrC,UAAU,iBAAiBJ,MAAM,mBCpEjEgF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOrF,EAAAC,EAAAC,cAACoF,EAAD,MAAaC,SAASC,eAAe,SD0H/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3e23eb9c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Input.scss';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Input = ({ onChange, onKeyPress, value }) => {\r\n    return(\r\n        <div className=\"input-block\">\r\n            <i className=\"fas fa-film\"></i>\r\n            <input type=\"text\" onChange={onChange} onKeyPress={onKeyPress} value={value} placeholder=\"Find your film\" />\r\n        </div>\r\n    );\r\n};\r\n\r\nInput.propTypes = {\r\n    onChange: PropTypes.func,\r\n    onKeyPress: PropTypes.func,\r\n    value: PropTypes.string\r\n}\r\n\r\nInput.defaultProps = {\r\n    onChange: () => {},\r\n    onKeyPress: () => {},\r\n    value: \"\"\r\n}\r\n\r\nexport default Input;","import React from 'react';\r\nimport './FilmItem.scss';\r\nimport PropTypes from 'prop-types';\r\nimport  { IMG } from '../../container/FilmApp';\r\n\r\nconst FilmItem = ({ films }) => {\r\n    return(\r\n        <>\r\n        {films.map( film => {\r\n            return <li key={film.id}>\r\n            <div className=\"item fade-in\">\r\n                <img src={IMG + film.poster_path} alt=\"No poster\" />\r\n                <h3>{film.title}</h3>\r\n                <p>Raiting: {film.vote_average} <i className=\"far fa-star\"></i></p>\r\n                <p>Release date: {film.release_date}</p>\r\n            </div>\r\n        </li>\r\n        })}\r\n        </>\r\n    )\r\n};\r\n\r\nFilmItem.propTypes = {\r\n    id: PropTypes.number,\r\n    src: PropTypes.string,\r\n    title: PropTypes.string,\r\n    average: PropTypes.number,\r\n    release: PropTypes.string,\r\n    films: PropTypes.array\r\n}\r\nFilmItem.defaultProps = {\r\n    id: 0,\r\n    src: \"\",\r\n    title: \"\",\r\n    average: 0,\r\n    release: \"\",\r\n    films: []\r\n}\r\n\r\n\r\nexport default FilmItem;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Button = ({ onClick, value, className }) => (\r\n    <button className={className} onClick={onClick}>{value}</button>\r\n);\r\n\r\nButton.propTypes = {\r\n    onClick: PropTypes.func,\r\n    className: PropTypes.string,\r\n    value: PropTypes.string\r\n}\r\n\r\nButton.defaultProps = {\r\n    onClick: () => {},\r\n    className: \"\",\r\n    value: \"\"\r\n}\r\n\r\nexport default Button;","import React, { useState, useEffect } from 'react';\r\nimport './FilmApp.scss';\r\nimport Input from '../components/Input/Input';\r\nimport FilmItem from '../components/FilmItem/FilmItem';\r\nimport Button from '../components/Button/Button';\r\n\r\n/* My Key */\r\nconst API_KEY = \"api_key=02b590a5dc4f1ccca9d2d7d2389b1b44\";\r\n\r\n/* Find Only Popular films */\r\nconst POPULAR = \"https://api.themoviedb.org/3/movie/popular?\";\r\n\r\n/* API for search */\r\nconst SEARCH = \"https://api.themoviedb.org/3/search/movie?\";\r\nconst QUERY = \"&query=\";\r\nconst LANG_EN = \"&language=en-US\";\r\n\r\n/* For Paginations */\r\nconst PAGES = \"&page=1\";\r\n\r\n/* Image Link */\r\nexport const IMG = \"https://image.tmdb.org/t/p/w200\";\r\n\r\nconst FilmApp = () => {\r\n    const [text, setText] = useState(\"\");\r\n    const [items, setItems] = useState([]);\r\n    const [viewFilm, setViewFilm] = useState(4);\r\n \r\n    const handleChange = (e) =>{\r\n        setText(e.target.value);\r\n    }\r\n    useEffect(\r\n        () => {\r\n            const FetchPopular = async () => {\r\n                const response = await fetch(`${POPULAR}${API_KEY}${LANG_EN}${PAGES}`);\r\n                const data = await response.json();\r\n                const item = await data.results;\r\n                setItems(item);\r\n            }\r\n            FetchPopular();\r\n        },\r\n        []\r\n    )\r\n\r\n    const fetchData = async (search) => {\r\n        if(search !== \"\"){\r\n            const resp = await fetch(`${SEARCH}${API_KEY}${LANG_EN}${QUERY}${search}`);\r\n            const data = await resp.json();\r\n            const item = await data.results;\r\n            setItems(item);\r\n        }\r\n    }\r\n\r\n    const handlePress = ({ key }) => {\r\n        if(key === \"Enter\"){\r\n            fetchData(text);\r\n        }\r\n    }\r\n    //Get films \r\n\r\n   const addFilms = () => {\r\n       setViewFilm(viewFilm + 4);\r\n   }\r\n\r\n    return(\r\n        <div className=\"full-container\">\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                  <div className=\"col-12 m-auto\">\r\n                      <div className=\"nav-content\">\r\n                          <Input onKeyPress={handlePress} onChange={handleChange} value={text} />\r\n                      </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-10 m-auto\">\r\n                        <ul className=\"film-list\">\r\n                            { text ? <FilmItem films={items.slice(0,viewFilm)} /> : <FilmItem films={items.slice(0, viewFilm)} /> }\r\n                        </ul>\r\n                        {viewFilm < items.length && \r\n                         <Button onClick={addFilms} className=\"pagination-btn\" value=\"Load more\" />\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default FilmApp;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport '../node_modules/bootstrap/dist/css/bootstrap-grid.min.css';\nimport FilmApp from './container/FilmApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<FilmApp />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}